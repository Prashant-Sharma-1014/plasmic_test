// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nFjNKQj52vQ71pvQo3gqEb
// Component: Olm3_ykywBLmU
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button2 from "../../Button2"; // plasmic-import: Zkw7kzOJlBe/component
import { GraphqlFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: 0DrxdjD45dkx/codeComponent
import CopyableLink from "../../CopyableLink"; // plasmic-import: L5S88iS9grPbp/component
import { useScreenVariants as useScreenVariants_6HrcQsCevL9L7 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6HrcQSCevL9L7/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_minimalist_about_me_page.module.css"; // plasmic-import: nFjNKQj52vQ71pvQo3gqEb/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: Olm3_ykywBLmU/css
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 6_5mJVAw_mw/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: KwkIsDYGZW-/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 2-_vXfItSmLIN/icon
import LinkedinsvgIcon from "./icons/PlasmicIcon__Linkedinsvg"; // plasmic-import: Z1KZXk77Wzq/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: sZNC9oCsdRQsm/icon
import image7PzoQMtZs7B from "./images/image.svg"; // plasmic-import: 7pzoQMtZs7B/picture
import image44FxGeZj8Mx from "./images/image44.png"; // plasmic-import: FXGeZj8MX/picture
import _424671JpgPYo0HmGr5 from "./images/_424671Jpg.jpeg"; // plasmic-import: pYo0hmGr5/picture
import _05230CebF8A44B629E947Cf5D4Dac148JpgWrEv6ClFs from "./images/_05230CebF8A44B629E947Cf5D4Dac148Jpg.jpeg"; // plasmic-import: wrEv6clFS/picture
import _424661PngLfH9JxXlO from "./images/_424661Png.png"; // plasmic-import: LfH9JXXlO/picture
import _424681PngKILeJVjuw from "./images/_424681Png.jpeg"; // plasmic-import: kILeJVjuw/picture
import _424701Png937TBqm2C from "./images/_424701Png.jpeg"; // plasmic-import: 937tBQM2c/picture

export const PlasmicHomepage__VariantProps = new Array("unnamedVariant");

export const PlasmicHomepage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "unnamedVariant",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.unnamedVariant
          : undefined
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6HrcQsCevL9L7()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [sty.rootunnamedVariant]: hasVariant(
                $state,
                "unnamedVariant",
                "unnamedVariant"
              )
            }
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__pZmi)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__yHrZ3)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___9HP0)}
                displayHeight={"40px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"40px"}
                src={{
                  src: image7PzoQMtZs7B,
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__iGCk2)}
              >
                <Button2
                  className={classNames("__wab_instance", sty.button2___6BIep)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__gIFd)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__i2Wvf)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xmScc
                    )}
                  >
                    {"Services"}
                  </div>
                </Button2>

                <Button2
                  className={classNames("__wab_instance", sty.button2___87No6)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__lBroV)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__wJdme)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__q8AIt
                    )}
                  >
                    {"Features"}
                  </div>
                </Button2>

                <Button2
                  className={classNames("__wab_instance", sty.button2___95Hbg)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg___8GSws)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__yw7T6)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pCwOi
                    )}
                  >
                    {"Company"}
                  </div>
                </Button2>

                <Button2
                  className={classNames("__wab_instance", sty.button2__q65D0)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__bozZ6)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg___2KRlg)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tz8IY
                    )}
                  >
                    {"Contact"}
                  </div>
                </Button2>

                <Button2
                  className={classNames("__wab_instance", sty.button2__fFsj4)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__bJSrk)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg___2N0Gy)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kfS8X
                    )}
                  >
                    {"Log in"}
                  </div>
                </Button2>

                <Button2
                  className={classNames("__wab_instance", sty.button2__cUWhk)}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__nhae3)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__qcmJn)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jdczK
                    )}
                  >
                    {"Sign up"}
                  </div>
                </Button2>
              </p.Stack>

              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__gi89F)}>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__s7Ed
                    )}
                  >
                    {"Sign up"}
                  </button>

                  {true ? (
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2___1H2
                      )}
                      color={"clear"}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg__hs6G)}
                          role={"img"}
                        />
                      }
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__skg0A)}
                          role={"img"}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aMm87
                        )}
                      >
                        {"Log in"}
                      </div>
                    </Button2>
                  ) : null}
                </div>
              ) : null}
            </p.Stack>
          </p.Stack>

          <div className={classNames(projectcss.all, sty.freeBox__oqU9X)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__fHm35)}
              displayHeight={"24.83%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"14.13%"}
              loading={"eager"}
              src={{
                src: image44FxGeZj8Mx,
                fullWidth: 768,
                fullHeight: 855,
                aspectRatio: undefined
              }}
            />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___5Z05J)}
            >
              <Button2
                className={classNames("__wab_instance", sty.button2___6VqQ)}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__gytuj)}
                    role={"img"}
                  />
                }
                link={"https://naksconsulting.com/services/"}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__yw3P)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__w7GCm
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FFFFFF" }}
                    >
                      {"Services"}
                    </span>
                  </React.Fragment>
                </div>
              </Button2>

              {true ? (
                <Button2
                  className={classNames("__wab_instance", sty.button2__kn4Oc)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__w1E)}
                      role={"img"}
                    />
                  }
                  link={"https://naksconsulting.com/"}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg___9WDe3)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cJco0
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"Company"}
                      </span>
                    </React.Fragment>
                  </div>
                </Button2>
              ) : null}

              <Button2
                className={classNames("__wab_instance", sty.button2__yYnxm)}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__rzGa9)}
                    role={"img"}
                  />
                }
                link={"https://naksconsulting.com/contact-us/"}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__qcL6I)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wq8Sn
                  )}
                >
                  {"Contact"}
                </div>
              </Button2>

              <Button2
                className={classNames("__wab_instance", sty.button2__yuvEs)}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__qznDc)}
                    role={"img"}
                  />
                }
                link={
                  "https://outlook.office365.com/owa/calendar/NAKSDigitalConsulting@naksconsulting.com/bookings/"
                }
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__jeLeA)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5URzb
                  )}
                >
                  {"Book an appointment"}
                </div>
              </Button2>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__t4YA)}
            >
              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__hbDgh)}>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__ykXjQ
                    )}
                  >
                    {"Sign up"}
                  </button>

                  {true ? (
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__twqsb
                      )}
                      color={"clear"}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg__hyNst)}
                          role={"img"}
                        />
                      }
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__diz46)}
                          role={"img"}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lBlWa
                        )}
                      >
                        {"Log in"}
                      </div>
                    </Button2>
                  ) : null}
                </div>
              ) : null}
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___2FqtP)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qqziE
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ textDecoration: "underline" }}
                    >
                      {"Naks Digital Consulting..."}
                    </span>
                  </React.Fragment>
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__z3BTx
                  )}
                >
                  {"Digital transformation se lekar OOH tak, Sab..."}
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__z4Jq)}
              >
                <Button2
                  className={classNames("__wab_instance", sty.button2__eb0Rm)}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg___7H68X)}
                      role={"img"}
                    />
                  }
                  link={`/features-page`}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__wnJb6)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kdwAm
                    )}
                  >
                    {"Features ->"}
                  </div>
                </Button2>

                <Button2
                  className={classNames("__wab_instance", sty.button2__pnDt)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__daJR)}
                      role={"img"}
                    />
                  }
                  link={
                    "https://naksconsulting.com/case_study/inception-to-mvp-to-scaled-rollout-for-a-digital-insurance-startup/"
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__jgifu)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__blz0M
                    )}
                  >
                    {"Learn more…"}
                  </div>
                </Button2>

                {([2, 3, 4] ?? []).map((currentItem, currentIndex) => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nQc2)}
                    key={currentIndex}
                  />
                ))}
              </p.Stack>
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox__vEzIb)}>
              <GraphqlFetcher
                data-plasmic-name={"graphQlFetcher"}
                data-plasmic-override={overrides.graphQlFetcher}
                className={classNames("__wab_instance", sty.graphQlFetcher)}
                dataName={"fetchedData"}
                errorDisplay={
                  <ph.DataCtxReader>
                    {$ctx => "Error fetching data"}
                  </ph.DataCtxReader>
                }
                headers={{
                  "Content-Type": "application/json",
                  Accept: "application/json"
                }}
                loadingDisplay={
                  <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
                }
                method={"POST"}
                noLayout={false}
                query={{
                  query:
                    "query MyQuery($name: String) {\n  characters(filter: {name: $name}) {\n    results {\n      name\n      species\n      image\n    }\n  }\n}\n",
                  variables: {}
                }}
                url={"https://rickandmortyapi.com/graphql"}
                varOverrides={{}}
              >
                <ph.DataCtxReader>
                  {$ctx =>
                    (
                      (() => {
                        try {
                          return $ctx.fetchedData.data.characters.results;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return [];
                          }
                          throw e;
                        }
                      })() ?? []
                    ).map((currentItem, currentIndex) => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__b3Dw0
                        )}
                        key={currentIndex}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__dEjoi)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return currentItem.image;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mgq6R
                          )}
                        >
                          {(() => {
                            try {
                              return currentItem.name;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return "Enter some text";
                              }
                              throw e;
                            }
                          })()}
                        </div>
                      </div>
                    ))
                  }
                </ph.DataCtxReader>
              </GraphqlFetcher>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__tny31)}>
            <div className={classNames(projectcss.all, sty.freeBox__dxq6O)} />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iGciQ)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__vPsH3)}>
                <div className={classNames(projectcss.all, sty.freeBox__i2EZ)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qSLnr,
                      {
                        [sty.textunnamedVariant__qSLnrOeGVu]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        )
                      }
                    )}
                  >
                    {"Prashant Sharma "}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zm89
                    )}
                  >
                    {"Iske us mein vo daal do"}
                  </div>
                </div>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__koqAk)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rrAIt
                  )}
                >
                  {" "}
                </div>

                <div
                  className={classNames(projectcss.all, sty.freeBox___1LYqo)}
                >
                  <CopyableLink
                    data-plasmic-name={"copyableLink"}
                    data-plasmic-override={overrides.copyableLink}
                    className={classNames("__wab_instance", sty.copyableLink)}
                  >
                    {"anonymouskiller1014@gmail.com"}
                  </CopyableLink>
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__sLTqd)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ytDs4)}
                  >
                    <a
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__fktSu
                      )}
                      href={"https://naksconsulting.com/"}
                      target={"_blank"}
                    >
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__z9D4Q)}
                        role={"img"}
                      />
                    </a>

                    <a
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link___0SwZ
                      )}
                      href={"https://www.linkedin.com/company/naks-digital/"}
                    >
                      <LinkedinsvgIcon
                        className={classNames(projectcss.all, sty.svg___3Swxo)}
                        role={"img"}
                      />
                    </a>

                    <a
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__q4Y5G
                      )}
                      href={"https://www.github.com"}
                    >
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg__kjkew)}
                        role={"img"}
                      />
                    </a>
                  </p.Stack>
                </p.Stack>
              </div>
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox__sKiFn)} />
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hmnaD)}
          >
            {true ? (
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__qV5Op)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___1Sxt8)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: _424671JpgPYo0HmGr5,
                      fullWidth: 4896,
                      fullHeight: 3216,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__sYk2A)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__a4Xrk)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"1316px"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: _05230CebF8A44B629E947Cf5D4Dac148JpgWrEv6ClFs,
                      fullWidth: 1600,
                      fullHeight: 1200,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__qtonB)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ktUgt)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"eager"}
                    src={{
                      src: _424671JpgPYo0HmGr5,
                      fullWidth: 4896,
                      fullHeight: 3216,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__s1Mk6)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__zR6SK)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: _424661PngLfH9JxXlO,
                      fullWidth: 4648,
                      fullHeight: 3120,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__vcfox)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__z9Jn)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: _424681PngKILeJVjuw,
                      fullWidth: 4896,
                      fullHeight: 3192,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__m1UZp)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__w8VV2)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: _424701Png937TBqm2C,
                      fullWidth: 3648,
                      fullHeight: 2544,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            ) : null}
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "foreground2", "graphQlFetcher", "copyableLink", "columns"],
  foreground2: ["foreground2"],
  graphQlFetcher: ["graphQlFetcher"],
  copyableLink: ["copyableLink"],
  columns: ["columns"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    foreground2: makeNodeComponent("foreground2"),
    graphQlFetcher: makeNodeComponent("graphQlFetcher"),
    copyableLink: makeNodeComponent("copyableLink"),
    columns: makeNodeComponent("columns"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "usa population data ",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
